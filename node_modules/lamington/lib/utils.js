"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const chai = require("chai");
// @ts-ignore
const deepEqualInAnyOrder = require("deep-equal-in-any-order");
const eosManager_1 = require("./eosManager");
// Extend Chai's expect methods
chai.use(deepEqualInAnyOrder);
/**
 * Pauses the current process until the specified EOS block number occurs
 * @note Assumes blocks will always be produced every 500ms
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param number Process sleep duration
 */
exports.untilBlocknumber = (number) => __awaiter(void 0, void 0, void 0, function* () {
    // Loops until current head block number reaches desired
    let { head_block_num } = yield eosManager_1.EOSManager.rpc.get_info();
    while (head_block_num < number) {
        // Sleep for block duration and update current block number
        yield exports.sleep((number - head_block_num) * 500);
        ({ head_block_num } = yield eosManager_1.EOSManager.rpc.get_info());
    }
});
/**
 * Pauses the current process for the specified duration
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param delayInMs Process sleep duration
 */
exports.sleep = (delayInMs) => __awaiter(void 0, void 0, void 0, function* () { return new Promise(resolve => setTimeout(resolve, delayInMs)); });
/**
 * Pauses the current process for the 500ms EOS block time
 * @note The process will wake during and not on the next block
 * @author Kevin Brown <github.com/thekevinbrown>
 */
exports.nextBlock = () => exports.sleep(500);
/**
 * Compares table rows against expected rows irrespective of order
 * @author Kevin Brown <github.com/thekevinbrown>
 * @author Mitch Pierias <github.com/MitchPierias>
 * @param getTableRowsResult Get table rows result promise
 * @param expected Expected table row query results
 * @param strict Strict comparison flag
 */
exports.assertRowsEqual = (getTableRowsResult, expected, strict = false) => __awaiter(void 0, void 0, void 0, function* () {
    // Pass-through strict comparison
    if (strict) {
        exports.assertRowsEqualStrict(getTableRowsResult, expected);
        return;
    }
    // Call table row query and assert results eventually equal expected
    const result = yield getTableRowsResult;
    // @ts-ignore - Not sure how to add this extended method `equalInAnyOrder`?
    chai.expect(result).to.deep.equalInAnyOrder({
        rows: expected,
        more: false,
    });
});
/**
 * Performs a strict comparison of queried table rows against expected rows
 * @author Mitch Pierias <github.com/MitchPierias>
 * @param getTableRowsResult Get table rows result promise
 * @param expected Expected table row query results
 */
exports.assertRowsEqualStrict = (getTableRowsResult, expected) => __awaiter(void 0, void 0, void 0, function* () {
    // Call the table row query and assert results equal expected
    const result = yield getTableRowsResult;
    assert.deepStrictEqual(result, {
        rows: expected,
        more: false,
    });
});
/**
 * Validates the number of rows returned is equal to the expected count
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param getTableRowsResult Get table rows result promise
 * @param expectedRowCount Expected number of table rows
 */
exports.assertRowCount = (getTableRowsResult, expectedRowCount) => __awaiter(void 0, void 0, void 0, function* () {
    const result = yield getTableRowsResult;
    // Precheck table rows don't extend beyond returned result
    assert.equal(result.more, false, `There were more rows pending on the response which was not expected.`);
    // Validate the number of rows returned equals the expected count
    assert.equal(result.rows.length, expectedRowCount, `Different number of rows than expected.`);
});
/**
 * Asserts EOS throws an error and validates the error output name matches the expected `eosErrorName`
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param operation Operation promise
 * @param eosErrorName Expected EOS error name
 * @param description Output message description
 */
exports.assertEOSError = (operation, eosErrorName, description) => __awaiter(void 0, void 0, void 0, function* () {
    // Execute operation and handle exceptions
    try {
        yield operation;
    }
    catch (error) {
        if (error.json && error.json.error && error.json.error.name) {
            // Compare error and fail if the error doesn't match the expected
            assert(error.json.error.name === eosErrorName, `Expected ${eosErrorName}, got ${error.json.error.name} instead.`);
            return;
        }
        else {
            // Fail if error not thrown by EOS
            assert.fail(`Expected EOS error ${eosErrorName}, but got ${JSON.stringify(error, null, 4)} instead.`);
        }
    }
    // Fail if no exception thrown
    assert.fail(`Expected ${description} but operation completed successfully.`);
});
/**
 * Asserts operation throws an `eosio_assert_message_exception` error
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param operation Operation promise
 */
exports.assertEOSException = (operation) => exports.assertEOSError(operation, 'eosio_assert_message_exception', 'assert');
/**
 * Asserts operation is missing the required authority by throwing a `missing_auth_exception` error
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param operation Operation promise
 */
exports.assertMissingAuthority = (operation) => exports.assertEOSError(operation, 'missing_auth_exception', 'missing authority');
