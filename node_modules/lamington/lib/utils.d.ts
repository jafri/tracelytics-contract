import { TableRowsResult } from './contracts';
/**
 * Pauses the current process until the specified EOS block number occurs
 * @note Assumes blocks will always be produced every 500ms
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param number Process sleep duration
 */
export declare const untilBlocknumber: (number: number) => Promise<void>;
/**
 * Pauses the current process for the specified duration
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param delayInMs Process sleep duration
 */
export declare const sleep: (delayInMs: number) => Promise<unknown>;
/**
 * Pauses the current process for the 500ms EOS block time
 * @note The process will wake during and not on the next block
 * @author Kevin Brown <github.com/thekevinbrown>
 */
export declare const nextBlock: () => Promise<unknown>;
/**
 * Compares table rows against expected rows irrespective of order
 * @author Kevin Brown <github.com/thekevinbrown>
 * @author Mitch Pierias <github.com/MitchPierias>
 * @param getTableRowsResult Get table rows result promise
 * @param expected Expected table row query results
 * @param strict Strict comparison flag
 */
export declare const assertRowsEqual: <RowType>(getTableRowsResult: Promise<TableRowsResult<RowType>>, expected: RowType[], strict?: boolean) => Promise<void>;
/**
 * Performs a strict comparison of queried table rows against expected rows
 * @author Mitch Pierias <github.com/MitchPierias>
 * @param getTableRowsResult Get table rows result promise
 * @param expected Expected table row query results
 */
export declare const assertRowsEqualStrict: <RowType>(getTableRowsResult: Promise<TableRowsResult<RowType>>, expected: RowType[]) => Promise<void>;
/**
 * Validates the number of rows returned is equal to the expected count
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param getTableRowsResult Get table rows result promise
 * @param expectedRowCount Expected number of table rows
 */
export declare const assertRowCount: (getTableRowsResult: Promise<TableRowsResult<any>>, expectedRowCount: number) => Promise<void>;
/**
 * Asserts EOS throws an error and validates the error output name matches the expected `eosErrorName`
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param operation Operation promise
 * @param eosErrorName Expected EOS error name
 * @param description Output message description
 */
export declare const assertEOSError: (operation: Promise<any>, eosErrorName: string, description: string) => Promise<void>;
/**
 * Asserts operation throws an `eosio_assert_message_exception` error
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param operation Operation promise
 */
export declare const assertEOSException: (operation: Promise<any>) => Promise<void>;
/**
 * Asserts operation is missing the required authority by throwing a `missing_auth_exception` error
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param operation Operation promise
 */
export declare const assertMissingAuthority: (operation: Promise<any>) => Promise<void>;
//# sourceMappingURL=utils.d.ts.map