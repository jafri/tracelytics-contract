import { Account } from '../accounts';
import { Api } from 'eosjs';
import { Contract as EOSJSContract, Type } from 'eosjs/dist/eosjs-serialize';
import { Abi } from 'eosjs/dist/eosjs-rpc-interfaces';
export interface ContractActionParameters {
    [key: string]: any;
}
export interface ContractActionOptions {
    from?: Account;
    debug?: boolean;
}
export interface ContractConstructorArgs {
    eos: Api;
    identifier?: string;
    account: Account;
    abi: Abi;
    actions: Map<string, Type>;
    types: Map<string, Type>;
}
export interface GetTableRowsOptions {
    scope?: string;
    tableKey?: string;
    lowerBound?: any;
    upperBound?: any;
    indexPosition?: any;
    keyType?: any;
    limit?: number;
    reverse?: boolean;
    showPayer?: boolean;
}
/**
 * Adds additional functionality to the EOSJS `Contract` class
 */
export declare class Contract implements EOSJSContract {
    /** @hidden EOSJS api reference */
    private _eos;
    /** @hidden Current contract account */
    private _account;
    /** @hidden Contract identifier. Typically the contract file name minus the extension.
     * Can be undefined when the contract is loaded as already deployed and we're never given an indentifier to map it back to. */
    private _identifier?;
    /** @hidden Current contract ABI */
    private _abi;
    /** Deployed contract actions */
    actions: Map<string, Type>;
    /** Deployed contract types */
    types: Map<string, Type>;
    /**
     * Gets the currently configured contract account
     * @author Kevin Brown <github.com/thekevinbrown>
     * @returns Current contract account
     */
    readonly account: Account;
    /**
     * Gets the current contract identifier
     * @author Kevin Brown <github.com/thekevinbrown>
     * @returns Contract identifier
     */
    readonly identifier: string | undefined;
    constructor({ eos, identifier, account, abi, actions, types }: ContractConstructorArgs);
    /**
     * Retrieves table rows with the specified table name and optional scope
     * @author Kevin Brown <github.com/thekevinbrown>
     * @note Implements a temporary patch for the EOSjs `bool` mapping error
     * @param table The table name
     * @param scope Optional table scope, defaults to the table name
     * @note The original EOSJS typings for this are just `any`. I'd love to improve that.
     */
    getTableRows: (table: string, options?: GetTableRowsOptions | undefined) => Promise<any>;
    /**
     * Grants `eosio.code` permission to the contract account's `active` key
     * @note Can also be called from AccountManager, as the action is technically an account based action.
     * @author Kevin Brown <github.com/thekevinbrown>
     * @author Mitch Pierias <github.com/MitchPierias>
     */
    addCodePermission: () => Promise<void>;
}
//# sourceMappingURL=contract.d.ts.map