import { Contract } from './contract';
import { Account } from '../accounts';
/**
 * Provides a set of methods to manage contract deployment
 */
export declare class ContractDeployer {
    /**
     * Deploys contract files to a specified account
     *
     * ```typescript
     * // Create a new account
     * const account = await AccountManager.createAccount();
     * // Deploy the contract `mycontract` to the account
     * ContractDeployer.deployToAccount<MyContractTypeDef>('mycontract', account);
     * ```
     * @author Kevin Brown <github.com/thekevinbrown>
     * @param contractIdentifier Contract identifier, typically the contract filename minus the extension
     * @param account Account to apply contract code
     * @returns Deployed contract instance
     */
    static deployToAccount<T extends Contract>(contractIdentifier: string, account: Account): Promise<T>;
    /**
     * Deploys contract files to a randomly generated account
     *
     * ```typescript
     * // Deploy the contract with identifier
     * ContractDeployer.deploy<MyContractTypeDef>('mycontract');
     * ```
     *
     * @author Kevin Brown <github.com/thekevinbrown>
     * @param contractIdentifier Contract identifier, typically the contract filename minus the extension
     * @returns Deployed contract instance
     */
    static deploy<T extends Contract>(contractIdentifier: string): Promise<T>;
    /**
     * Deploys contract files to a specified account name
     *
     * ```typescript
     * // Deploy the `mycontract` contract to the account with name `mycontractname`
     * ContractDeployer.deployWithName<MyContractTypeDef>('mycontract', 'mycontractname');
     * ```
     *
     * @note Generating a pseudorandom private key is not safe in the cryptographic sense. It can be used for testing.
     * @author Mitch Pierias <github.com/MitchPierias>
     * @param contractIdentifier Contract identifier, typically the contract filename minus the extension
     * @param accountName Account name
     * @returns Deployed contract instance
     */
    static deployWithName<T extends Contract>(contractIdentifier: string, accountName: string): Promise<T>;
}
//# sourceMappingURL=contractDeployer.d.ts.map