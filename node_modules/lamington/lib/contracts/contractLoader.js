"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const contract_1 = require("./contract");
const accounts_1 = require("../accounts");
const eosManager_1 = require("../eosManager");
/**
 * Provides a set of methods to create contract references for already existing contracts
 */
class ContractLoader {
    /**
     * Loads a contract instance for a contract which is already deployed to the blockchain.
     *
     * ```typescript
     * ContractLoader.at<MyContractTypeDef>(myContractAccount);
     *
     * // or
     *
     * ContractLoader.at<MyContractTypeDef>('my.contract');
     * ```
     * @author Kevin Brown <github.com/thekevinbrown>
     * @param accountOrName The account or account name where the contract is already deployed.
     * @returns Contract instance
     */
    static at(accountOrName) {
        return __awaiter(this, void 0, void 0, function* () {
            const account = accountOrName instanceof accounts_1.Account ? accountOrName : new accounts_1.Account(accountOrName);
            // Load the ABI from the blockchain.
            const { abi } = yield eosManager_1.EOSManager.rpc.get_abi(account.name);
            if (!abi)
                throw new Error(`Could not load ABI for contract at '${account.name}'.`);
            // Fetch the contract actions and types
            const { actions, types } = yield eosManager_1.EOSManager.api.getContract(account.name);
            // Return our newly deployed contract instance
            return new contract_1.Contract({
                eos: eosManager_1.EOSManager.api,
                account,
                abi,
                actions,
                types,
            });
        });
    }
}
exports.ContractLoader = ContractLoader;
