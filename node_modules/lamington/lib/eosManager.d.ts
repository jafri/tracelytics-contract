import { Api, JsonRpc } from 'eosjs';
import { JsSignatureProvider } from 'eosjs/dist/eosjs-jssig';
import { Account } from './accounts';
interface InitArgs {
    adminAccount: Account;
    chainId?: string;
    httpEndpoint: string;
}
/**
 * Manages client connection and communication with a local EOSIO node
 */
export declare class EOSManager {
    /** Defaults to `eosio` administration account */
    static adminAccount: Account;
    /** Development signature provider */
    static signatureProvider: JsSignatureProvider;
    /** Configured EOSjs client */
    static api: Api;
    /** RPC connection with the local EOSIO node at `http://127.0.0.1:8888` */
    static rpc: JsonRpc;
    /**
     * Initializes a default connection to the local EOSIO node on port `8888` and
     * assigns the default `eosio` account with administration keys
     * @author Kevin Brown <github.com/thekevinbrown>
     */
    static initWithDefaults: () => void;
    /**
     * Initializes a connection to any EOSIO node and sets the administration keys which
     * Lamington uses to deploy contracts, create accounts, etc.
     * @author Kevin Brown <github.com/thekevinbrown>
     */
    static init: ({ httpEndpoint, adminAccount, chainId }: InitArgs) => void;
    /**
     * Ensures our signature provider has the key in question, and if not, adds it.
     * @author Kevin Brown <github.com/thekevinbrown>
     * @param account Account to be unioned into the signature list.
     */
    static addSigningAccountIfMissing: (account: Account) => void;
    /**
     * Executes a transaction against a connected EOSjs client
     * @author Kevin Brown <github.com/thekevinbrown>
     * @param transaction EOSIO transaction object
     * @param eos Connected EOSjs client
     * @param options Additional transaction options
     */
    static transact: (transaction: any, eos?: Api, options?: {
        debug?: boolean | undefined;
        blocksBehind?: number | undefined;
        expireSeconds?: number | undefined;
    } | undefined) => Promise<any>;
}
export {};
//# sourceMappingURL=eosManager.d.ts.map