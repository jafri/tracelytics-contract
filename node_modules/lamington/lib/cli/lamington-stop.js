"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const configManager_1 = require("../configManager");
/**
 * Stops the current Lamington docker container
 * @author Kevin Brown <github.com/thekevinbrown>
 */
const run = () => __awaiter(void 0, void 0, void 0, function* () {
    yield configManager_1.ConfigManager.initWithDefaults();
    if (!(yield utils_1.eosIsReady())) {
        console.log(`Can't stop the container as EOS is already not running.`);
        process.exit(1);
    }
    yield utils_1.stopContainer();
});
run().catch(error => {
    process.exitCode = 1;
    console.log(error);
});
