import 'trace';
import 'clarify';
import { Docker } from 'docker-cli-js';
export declare const docker: Docker;
/**
 * Determines if the docker image exists
 * @author Kevin Brown <github.com/thekevinbrown>
 * @returns Result of search
 */
export declare const imageExists: () => Promise<boolean>;
/**
 * Configures and builds the docker image
 * @author Kevin Brown <github.com/thekevinbrown>
 * @author Mitch Pierias <github.com/MitchPierias>
 */
export declare const buildImage: () => Promise<void>;
/**
 * Starts the Lamington container
 * @author Kevin Brown <github.com/thekevinbrown>
 */
export declare const startContainer: () => Promise<void>;
/**
 * Stops the current Lamington container
 * @author Kevin Brown <github.com/thekevinbrown>
 * @author Mitch Pierias <github.com/MitchPierias>
 * @returns Docker command promise
 */
export declare const stopContainer: () => Promise<void>;
/**
 * Sleeps the process until the EOS instance is available
 * @author Kevin Brown <github.com/thekevinbrown>
 * @author Mitch Pierias <github.com/MitchPierias>
 * @returns Connection success or throws error
 */
export declare const untilEosIsReady: (attempts?: number) => Promise<boolean>;
/**
 * Determines if EOS is available using the `get_info` query response
 * @author Kevin Brown <github.com/thekevinbrown>
 * @returns EOS instance availability
 */
export declare const eosIsReady: () => Promise<boolean>;
/**
 * Pulls the EOSIO docker image if it doesn't exist and starts
 * a new EOSIO docker container
 * @author Kevin Brown <github.com/thekevinbrown>
 * @author Mitch Pierias <github.com/MitchPierias>
 */
export declare const startEos: () => Promise<void>;
/**
 * Loads all test files and executes with Mocha
 * @author Kevin Brown <github.com/thekevinbrown>
 * @note This is where we should allow configuration over all files or specified files/folder
 */
export declare const runTests: () => Promise<void>;
/**
 * Finds and builds all C++ contracts
 * @author Kevin Brown <github.com/thekevinbrown>
 * @author Mitch Pierias <github.com/MitchPierias>
 * @param match Optional specific contract identifiers to build
 */
export declare const buildAll: (match?: string[] | undefined) => Promise<void>;
/**
 * Resolves the path to file identifier.
 * This is the path without trailing file extension
 * @author Kevin Brown <github.com/thekevinbrown>
 * @note What happens when the input path contains no trailing extension?
 * @param filePath Path to file
 * @returns Identifier path
 */
export declare const pathToIdentifier: (filePath: string) => string;
/**
 * Builds contract resources for contract at path
 * @author Kevin Brown <github.com/thekevinbrown>
 * @author Mitch Pierias <github.com/MitchPierias>
 * @param contractPath Local path to C++ contract file
 */
export declare const build: (contractPath: string) => Promise<void>;
/**
 * Determines the output location for a contract based on the full path of its C++ file.
 * @author Kevin Brown <github.com/thekevinbrown>
 * @param contractPath Full path to C++ contract file
 * @returns Output path for contract compilation artefacts
 */
export declare const outputPathForContract: (contractPath: string) => string;
/**
 * Compiles a C++ EOSIO smart contract at path
 * @author Kevin Brown <github.com/thekevinbrown>
 * @author Mitch Pierias <github.com/MitchPierias>
 * @param contractPath Full path to C++ contract file
 */
export declare const compileContract: (contractPath: string) => Promise<void>;
//# sourceMappingURL=utils.d.ts.map