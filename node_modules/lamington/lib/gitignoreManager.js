"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs_1 = require("fs");
const util_1 = require("util");
const exists = util_1.promisify(fs_1.exists);
const writeFile = util_1.promisify(fs_1.writeFile);
/* Defaults */
const configDirectory = '.lamington';
const gitignoreFilePath = path.join(configDirectory, '.gitignore');
const encoding = 'utf8';
/**
 * Manages the `.gitignore` file and configuration
 */
class GitIgnoreManager {
    /**
     * Creates a `.gitignore` file when it doesn't exist
     * and configures the base ignore files
     */
    static createIfMissing() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield exists(gitignoreFilePath))) {
                yield writeFile(gitignoreFilePath, `
data/
compiled_contracts/
`, encoding);
            }
        });
    }
}
exports.GitIgnoreManager = GitIgnoreManager;
