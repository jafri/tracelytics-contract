"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ecc = require("eosjs-ecc");
const accountManager_1 = require("./accountManager");
class Account {
    constructor(name, privateKey, publicKey) {
        /**
         * Adds the `eosio.code` permission to this account
         * @author Kevin Brown <github.com/thekevinbrown>
         * @author Mitch Pierias <github.com/MitchPierias>
         * @returns Add permission transaction promise
         */
        this.addCodePermission = () => __awaiter(this, void 0, void 0, function* () {
            yield accountManager_1.AccountManager.addCodePermission(this);
        });
        // Store references
        this.name = name;
        if (privateKey) {
            if (!ecc.isValidPrivate(privateKey)) {
                throw new Error('Private key is not valid.');
            }
            this.privateKey = privateKey;
            this.publicKey = ecc.privateToPublic(privateKey);
            if (publicKey && publicKey !== this.publicKey) {
                throw new Error(`Supplied public key does not match private key. Supplied key: ${publicKey} Expected key: ${ecc.privateToPublic(privateKey)} This is usually caused by using the legacy key format vs the new style key format.`);
            }
        }
        // Set default permissions
        this.permissions = {
            active: {
                actor: name,
                permission: 'active',
            },
            owner: {
                actor: name,
                permission: 'owner',
            },
        };
    }
    /**
     * Returns a configured active key permission
     * @author Kevin Brown <github.com/thekevinbrown>
     * @returns Valid active key
     */
    get active() {
        return [
            {
                actor: this.name,
                permission: 'active',
            },
        ];
    }
    /**
     * Returns a configured owner key permission
     * @author Kevin Brown <github.com/thekevinbrown>
     * @returns Valid owner key
     */
    get owner() {
        return [
            {
                actor: this.name,
                permission: 'owner',
            },
        ];
    }
}
exports.Account = Account;
