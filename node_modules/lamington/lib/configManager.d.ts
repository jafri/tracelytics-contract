/** @hidden Configuration object structure */
export interface LamingtonConfig {
    cdt: string;
    eos: string;
    keepAlive?: boolean;
    outDir?: string;
    exclude?: Array<string>;
    debugTransactions?: boolean;
    debug: LamingtonDebugLevel;
}
/** Level of debug output */
export declare enum LamingtonDebugLevel {
    NONE = 0,
    TRANSACTIONS = 1,
    ALL = 2
}
/**
 * Manages Lamington configuration setup and caching
 */
export declare class ConfigManager {
    /** @hidden EOSIO and EOSIO.CDT configuration settings */
    private static config;
    /**
     * Initialize application configuration using the user
     * defined configurations and defaults
     * @author Kevin Brown <github.com/thekevinbrown>
     * @author Mitch Pierias <github.com/MitchPierias>
     */
    static initWithDefaults(): Promise<void>;
    /**
     * Downloads the organization's latest repository release image and
     * returns the assets matching the specified filter
     * @author Kevin Brown <github.com/thekevinbrown>
     * @param organization Asset's case-sensitive repository organization
     * @param repository Asset's case-sensitive repository name
     * @param filter Resource filter
     * @hidden
     */
    private static getAssetURL;
    static isValidConfig(config: object): Promise<boolean>;
    /**
     * Creates a default configuration file if it doesn't exist at the specified path.
     * @author Mitch Pierias <github.com/MitchPierias>
     * @author Kevin Brown <github.com/thekevinbrown>
     * @param atPath Optional configuration file path. Defaults to `.lamingtonrc`.
     */
    static createConfigIfMissing(atPath?: string): Promise<void>;
    /**
     * Checks the existence of the configuration
     * file at the default [[CONFIGURATION_FILE_NAME]] or
     * optional path
     * @author Mitch Pierias <github.com/MitchPierias>
     * @param atPath Optional file path for lookup
     * @returns Config exists determiner
     */
    static configExists(atPath?: string): Promise<boolean>;
    /**
     * Loads an existing configuration file into [[ConfigManager.config]]
     * @author Kevin Brown <github.com/thekevinbrown>
     * @param atPath Optional file path for lookup
     */
    static loadConfigFromDisk(atPath?: string): Promise<void>;
    /**
     * Returns the current EOSIO configuration
     * @author Kevin Brown <github.com/thekevinbrown>
     */
    static readonly eos: string;
    /**
     * Returns the current EOSIO.CDT configuration
     * @author Kevin Brown <github.com/thekevinbrown>
     */
    static readonly cdt: string;
    /**
     * Returns the container keep alive setting or false
     * @author Mitch Pierias <github.com/MitchPierias>
     */
    static readonly keepAlive: boolean;
    /**
     * Returns the container's debug log output setting
     * @author Kevin Brown <github.com/thekevinbrown>
     */
    static readonly debugTransactions: boolean;
    /**
     * Returns the output build directory or [[CACHE_DIRECTORY]]
     * @author Mitch Pierias <github.com/MitchPierias>
     */
    static readonly outDir: string;
    /**
     * Returns the array of excluded strings or patterns
     * @author Mitch Pierias <github.com/MitchPierias>
     */
    static readonly exclude: string[];
}
//# sourceMappingURL=configManager.d.ts.map